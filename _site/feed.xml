<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-31T01:37:50+08:00</updated><id>http://localhost:4000/</id><title type="html">Harsh Gadodia</title><subtitle>Harsh Gadodia's Personal Website</subtitle><author><name>Harsh Gadodia</name><email>gadodia.harsh@gmail.com</email></author><entry><title type="html">Reflections On 1 Year Of Software Engineering</title><link href="http://localhost:4000/blog/Reflections-on-1-Year-of-Software-Engineering/" rel="alternate" type="text/html" title="Reflections On 1 Year Of Software Engineering" /><published>2020-06-03T00:00:00+08:00</published><updated>2020-06-03T00:00:00+08:00</updated><id>http://localhost:4000/blog/Reflections-on-1-Year-of-Software-Engineering</id><content type="html" xml:base="http://localhost:4000/blog/Reflections-on-1-Year-of-Software-Engineering/">&lt;p&gt;3 June 2020&lt;/p&gt;

&lt;p&gt;Today marks a year of working full-time as a software engineer. With the caveat that I’m not an excellent engineer yet, here are some reflections of the past year, presented as advice to myself if I could time travel to one year ago.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Software Engineering is hard&lt;br /&gt;
Don’t be fooled by people around you who claim to just get it, they’ve put in their due diligence. It’s normal to experience many moments of helplessness at the start, but I think that with experience and expertise, these moments will start to get rarer. You will feel yourself not just getting better at solving problems you’ve seen before, but also at those you haven’t. This is because as a software engineer whose job is to solve complex problems, you’re not just learning - you’re also learning to learn. Frameworks, libraries, languages, tools, methodologies, technologies will necessarily change faster than you can keep up unless you try. The world of technology is a fast-paced and constantly evolving one. The learning can never stop, and you need to accept that.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ask for advice&lt;br /&gt;
Talk to senior engineers. Talk to engineers you respect. Watch how they work. Asking for advice is not just a great way to learn things the easier way, but it also gets senior engineers invested in your growth. Do note though that if you’re always asking someone for advice and never following through, you’re doing one of three things: asking the wrong person for advice, lacking discipline, or just a jerk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2 categories of problems&lt;br /&gt;
 From my short experience in software engineering, I think there are 2 categories of problems you generally face as a software engineer. Let’s call them Category A and Category B. Category A problems are problems that you can figure out yourself with a tangible amount of effort, in a short period of time. Some examples of such problems are figuring out the syntax of a for loop in a new programming language, learning the difference between errors and exceptions, and understanding small functions in a codebase.&lt;/p&gt;

    &lt;p&gt;Category B problems, however, are quite different. You will not be able to solve these problems immediately, no matter how hard you try right now. This is because these problems are abstract in nature and require contextual knowledge, experience, and presume understanding of certain concepts that you might not currently have. For these problems, the best thing to do is to “suspend understanding”, try to understand just enough to get by right now, and revisit it next season. Alternatively, you can ask someone who understands the problem to explain it to you, and try to get as much as you can.&lt;/p&gt;

    &lt;p&gt;Some examples of Category B problems include understanding design patterns, containerization, and how database migrations work. Sometimes, you don’t even know which category the problem you are facing fits into. I think that this gets better with experience, just like many things. Furthermore, in the words of my mentor, “It takes a while before you make a good guess.” As you understand and solve more problems, you’ll get better at solving unknown problems too, especially because you know where to start.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Looking back and feeling embarrassed&lt;br /&gt;
 There are many moments when I look back at code I wrote months or weeks ago, and feel embarrassed by either my approach to solving the problem or why I didn’t get there faster. Don’t be mistaken - this is a great thing. If you’re embarrassed, you’ve grown. You’ve understood concepts. You’ve digested information. You’re no longer that same engineer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reading code&lt;br /&gt;
 Writing code is hard. Reading code is even harder. For me, one of the hardest things is not writing code, but reading code. Reading code requires you to step into the minds of the multiple engineers who have worked on the codebase before you, and think like them. This is not a skill that comes easily, but definitely a skill that is necessary to excel as an engineer. It’d be foolish to think you’d be working on green fields projects for the rest of your life. Sit down and train on this skill. When you’re really stuck, git blame and ask the person who wrote the code if they’re still around about what they were doing. Chances are, you’ll learn a new way of approaching problems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JFGI&lt;br /&gt;
 Stay away from engineers whose response to your every question is to ask you to &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=jfgi&quot;&gt;“jfgi”&lt;/a&gt;. While it’s not nice to run to someone for help every time you face a problem that you could figure out yourself, it’s also not ideal if senior engineers are not interested in helping you out at all too. When you’re new or inexperienced, there are just too many things you don’t know, and you might not know where to start. In these situations, some guidance can go a long way. Some of the best teachings I’ve gotten are not just how to solve a bug, but how to diagnose and analyse so you can get there yourself. Do be respectful and not disrupt someone else’s state of flow when asking questions, and preferably group questions together so it’s less distracting for the other party. This is even more important right now when everyone is working remotely and you can’t physically see if someone else is busy or already off work. And of course, please play that part for the new face once you know what you’re doing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Contributions&lt;br /&gt;
 I often felt small and insignificant because of how little code I was contributing at the start of my career. I still feel like that sometimes. However, I feel like the more you know and the more you learn, the faster you’ll be able to contribute. In other words, your contributions will grow exponentially with your growth. While the workplace is not a university where your raison d’être is to learn, it’s perfectly fine to spend time sharpening the knife as long as it’s in the spirit of what you do. I think it’s important to pick up new projects and work breadth-wise, especially at the start. Specializing so early on is over rated, or rather, doesn’t even make sense if you don’t even know what the options are. That’s bold.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Invest in your tools&lt;br /&gt;
 Sometimes it’s harder to see the big picture, but investing in tools, both hardware and software, will pay off in the long run. Instead of hacking away at problems, spend some time and money on resources that will make your life easier. If you’re going to be staring at a monitor 12 hours a day for the next 5 years, it probably makes sense to get one that you enjoy looking at. If you’re going to be using an IDE/text editor a lot, it’s probably worth it to spend some time getting to know the shortcuts, and how you can customise the tools. It’s probably also worth exploring tools that have stood the test of time, like Vim. People claim it can match the speed at which you think.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Burning out&lt;br /&gt;
 I think the feeling of burning out is normal. I’ve rarely, if ever, met engineers who never burn out, but that’s because they’re exceptional and derive intense motivation and energy from what they dp. I don’t think that automatically means that those who do burn out are less passionate though. When I feel burnt out, I take a couple of days off. I turn off notifications, and stay away from the computer. I go on walks without my phone. In less than a week, I’m raring to go again. That’s how I know I’m passionate about what I do.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think we’re extremely fortunate to be in this field at a time where it’s cool to know how to code, hardware is mature and not a consideration in most situations, and resources are plenty. I think the internet has brought more disruption to our lives in the past two decades than anything else in the past 6 million. It’s exhilarating to think about what the next few decades have in store for us - or more precisely, where we, software engineers, decide to take technology. I personally got into software engineering because I was mind blown by how much one can create and express themselves with a computer and internet access. Exciting times ahead!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Credits&lt;/em&gt;  &lt;br /&gt;
&lt;em&gt;A special shout out to David, KH, Mani, Shaun, and TH for being excellent mentors in my journey as a software engineer thus far. You guys are great. Thanks also to Vignesh, Ahan, Nicky, Rohan and Varun for reading drafts of this.&lt;/em&gt;&lt;/p&gt;</content><author><name>Harsh Gadodia</name><email>gadodia.harsh@gmail.com</email></author><summary type="html">3 June 2020</summary></entry><entry><title type="html">Mit Admission Process</title><link href="http://localhost:4000/blog/MIT-admission-process/" rel="alternate" type="text/html" title="Mit Admission Process" /><published>2019-12-08T00:00:00+08:00</published><updated>2019-12-08T00:00:00+08:00</updated><id>http://localhost:4000/blog/MIT-admission-process</id><content type="html" xml:base="http://localhost:4000/blog/MIT-admission-process/">&lt;p&gt;8 December 2019&lt;/p&gt;

&lt;p&gt;I’ve never seen an admissions process purer than the one MIT claims to have:&lt;/p&gt;

&lt;p&gt;“Our process is a student-centered process, not a school or region centered process. This means that we do not read your application along with other students from your school or region to compare you against each other; each applicant stands on their own. We have no quotas by school, state, or region. You are not at any disadvantage if other excellent students from your school or area are also applying. We also do not consider legacy/alumni relations in our process.”&lt;/p&gt;</content><author><name>Harsh Gadodia</name><email>gadodia.harsh@gmail.com</email></author><summary type="html">8 December 2019</summary></entry><entry><title type="html">This Is America</title><link href="http://localhost:4000/blog/This-is-America/" rel="alternate" type="text/html" title="This Is America" /><published>2019-07-02T00:00:00+08:00</published><updated>2019-07-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/This-is-America</id><content type="html" xml:base="http://localhost:4000/blog/This-is-America/">&lt;p&gt;2 July 2019&lt;/p&gt;

&lt;p&gt;2017 was an eye-opening year for me, having had the chance to live half the world away in the states for a year. When I look back to the year, I can think of many great memories - but if I try to think of the one thing that really represented America to me, it would be a humble wooden sign outside the shared swimming pool near my apartment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The use of alcohol and drugs in the pool is &lt;strong&gt;not encouraged&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;</content><author><name>Harsh Gadodia</name><email>gadodia.harsh@gmail.com</email></author><summary type="html">2 July 2019</summary></entry><entry><title type="html">The Trains Of Japan</title><link href="http://localhost:4000/blog/The-trains-of-japan/" rel="alternate" type="text/html" title="The Trains Of Japan" /><published>2019-05-23T00:00:00+08:00</published><updated>2019-05-23T00:00:00+08:00</updated><id>http://localhost:4000/blog/The-trains-of-japan</id><content type="html" xml:base="http://localhost:4000/blog/The-trains-of-japan/">&lt;p&gt;23 May 2019&lt;/p&gt;

&lt;p&gt;I loved many things about Japan, but my favourite was the Shinkansen (bullet train) by far. They are an absolute engineering marvel, the best in the world at safety, punctuality, and technology.&lt;/p&gt;

&lt;p&gt;There have been zero fatalities aboard the bullet trains in over fifty years of operation, the trains travel at close to 300 km/h, and the average annual delay per train is 0.9 minutes, &lt;em&gt;including&lt;/em&gt; natural disasters.&lt;/p&gt;

&lt;p&gt;These trains are representative of the Japanese culture in many ways, including a radical thirst for perfection and a devotion to craftsmanship.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/shinkansenN700.jpg&quot; width=&quot;100000000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/shinkansenE4.jpg&quot; width=&quot;100000000&quot; /&gt;&lt;/p&gt;</content><author><name>Harsh Gadodia</name><email>gadodia.harsh@gmail.com</email></author><summary type="html">23 May 2019</summary></entry><entry><title type="html">The Bae Area</title><link href="http://localhost:4000/blog/The-Bae-Area/" rel="alternate" type="text/html" title="The Bae Area" /><published>2018-06-06T00:00:00+08:00</published><updated>2018-06-06T00:00:00+08:00</updated><id>http://localhost:4000/blog/The-Bae-Area</id><content type="html" xml:base="http://localhost:4000/blog/The-Bae-Area/">&lt;p&gt;6 June 2018&lt;/p&gt;

&lt;p&gt;I had the opportunity to spend 2017 living and working in the San Francisco Bay Area, California, and it was definitely one of the greatest personal and professional experiences of my life. Being in the Bay Area was refreshing - you surely learn a great deal about yourself when you’re outside of your comfort zone (10,000 miles to be precise) - but it would be injustice to call it outside my comfort zone really. Over the year, I learnt to not only be comfortable where I was, but also grew a newfound appreciation for what it meant to be liberal, American, and be perhaps, truly free.&lt;/p&gt;

&lt;p&gt;The Bay Area hosted some of the kindest people I met - I was blessed with colleagues who treated interns with as much respect, if not more, as they treated fellow colleagues - horror stories from university friends had me expecting much worse. Throughout the year, I always felt like all my ideas, however naive, were valued just as much as the directors’. Having barely covered the essential computer science classes to be able to contribute at a decent level to any company, let alone production code being used by over a million users, I definitely was at the tip of my toes when I first joined &lt;a href=&quot;https://www.getepic.com&quot;&gt;Epic!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, I was in great hands to say the least - colleagues and more experienced engineers took a great deal of time off from their schedules daily to teach me the ways of the programmer - it was clear that they absolutely loved what they did, and also saw it as a humble duty to ensure they would pass on some of their learnings and knowledge to me. Their passion was extremely motivational and inspiring. Things were initially a little difficult for me at Epic! - I had a million questions all the time and I did not want to bug the other engineers all the time, and it meant that I sometimes spent hours staring at the screen trying to figure things out myself - and this would have taken someone with experience minutes. As a young intern in his first internship, you don’t know what you don’t know.&lt;/p&gt;

&lt;p&gt;Furthermore, engineering to me has also always been about the struggle (mentally, sometimes emotionally, rarely physically when I want to destroy everything with a wire coming out of it), the science (and art) of programming is one that that surely requires you to go through the pains of coming up with a solution yourself - giving it a Google (or a Hey Max, how’d you do this?) too soon is akin to depriving yourself with the joy (read: pain) of coming up with a solution yourself. What made it even more confusing was understanding where to draw the line: how much of the other engineers’ time was I deserving of, where should I give up and approach them, and at what point should I give up staring for my screen and actually approach someone for help? It really was very confusing for me at the beginning. It took me a great deal of time to understand that - and I promise you I never took this privilege lightly - that my job as an intern was to learn. I was there to prioritise my own learning from the best, and adding any value to the company was a side-effect of my stint at the company. I will forever be grateful to everyone at Epic! For investing in me, teaching me what it means to have a supportive work environment, and teaching me the joy in programming. I hope I can do the same for someone else one day too!&lt;/p&gt;

&lt;p&gt;Of course, no one wants to be a dud for a full year, but it took me a while to realise that the best way for me to give back to the company (which really was a great priority to me) was to be the best engineer that I could be. The best way to do that was to invest in myself but asking lots of questions, spending time at work reading up on concepts and technologies I was unfamiliar with, and learning by making mistakes. I realised that in the second of my year-long internship, when I started to ask more questions and prioritise my learning more, I actually was able to empower myself to write better code for the company.&lt;/p&gt;

&lt;p&gt;Having come from conservative Singapore, a great culture shock for me was how open Americans were : it was completely fine to talk about a late night out or have a cold one at the work place (beer-o-clock, we called it). This, I realised, actually worked in favour of the company - happy employees = productive workplace. This initially took me a while to get used to, but was definitely a refreshing (and I would daresay, superior) experience compared to the traditional, conservative workplace. The company structure was mostly flat too, and it went a long way in making everyone feel like they were important, and wanting to do their best. Micro-management makes great slaves.&lt;/p&gt;

&lt;p&gt;One of the most heartwarming things that I realised being in California was that everyone I spoke to was truly passionate about what they did. You could tell that they looked forward to being at work every morning, and didn’t mind staying until they finished their self-appointed tasks of the day. Here in Asia, people are generally more conservative with their career options - You could be a doctor, lawyer, engineer, or a loser. However, in America, a surprising number of people actually follow their dreams. They study what they want in college, and are not afraid to make switches mid-career if they feel like they do not enjoy what they do. I was amazed to find out that most of the engineers in the team did not have degrees in engineering - they varied from majors in music, sociology, audio-engineering, to even biology! This was by no means a coincidence though, Americans are willing to give people without the right paper credentials a chance, and in return, are paid back by passionate employees. I hope that we can do the same in Singapore with time to come, and focus less on the paper chase. Innovation can only be kindled if people enjoy what they do. Creativity is a by-product of passion and an open mind, and not quite academic rigour. Perhaps following your dreams is perhaps the sure-st way of being happy, and sometimes risking it all to do so is a holy obligation. Many colleagues who had done just that were reaping the benefits of doing so. Being happy was a choice they consciously made, albeit through trial and error.&lt;/p&gt;

&lt;p&gt;Being in California had other great advantages too - Redwood City’s (where I worked) claim to fame was Climate Best by Government Test. And I couldn’t agree more - temperature was practically between 8 degrees celcius and 20 degrees celcius all year long - days were generally long with sunny afternoons. The weather was supportive to sport and traveling practically all year long. California is also home to a great deal of microclimates - within the state, you have beaches, mountains, valleys, desserts, and even a rainforest. Redwood trees, some of the tallest trees in the world, are plentiful in the Bay. You do not have to travel far to see snow or sand, and some of the most beautiful places in the world, like Yosemite, Lake Tahoe, and King’s Canyon National Park are just hours away by car from the Bay.&lt;/p&gt;

&lt;p&gt;My year in California was nothing short of amazing - I’m fortunate to have been able to spend half of my Sophomore year and half of my Junior year abroad interning full-time and taking a couple of classes under the guidance of Stanford and Berkeley Professors. I will surely be back!&lt;/p&gt;</content><author><name>Harsh Gadodia</name><email>gadodia.harsh@gmail.com</email></author><summary type="html">6 June 2018</summary></entry></feed>